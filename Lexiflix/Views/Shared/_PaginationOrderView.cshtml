@using Lexiflix.Utils
@model PaginatedList<Lexiflix.Models.OrderViewModel>

@{
    var actionName = ViewData["ActionName"]?.ToString() ?? "Index";
}

@if (Model.TotalItems > 0)
{
    <!-- Pagination info display -->
    <div class="d-flex justify-content-between align-items-center mb-3 text-light">
        <div class="small fw-semibold">
            Showing @((Model.PageIndex - 1) * Model.PageSize + 1) to @(Math.Min(Model.PageIndex * Model.PageSize, Model.TotalItems)) of @Model.TotalItems orders
        </div>
        <div class="small fw-semibold">
            Page @Model.PageIndex of @Model.TotalPages
        </div>
    </div>

    <!-- Pagination controls -->
    @if (Model.TotalPages > 1)
    {
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                @if (Model.HasPreviousPage)
                {
                    <li class="page-item">
                        <a href="@Url.Action(actionName, new {
                            pageNumber = Model.PageIndex - 1,
                            searchString = ViewData["CurrentFilter"],
                            pageSize = ViewData["PageSize"]
                        })"
                           class="page-link bg-dark text-light border-warning"
                           aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                }

                @for (int i = Math.Max(1, Model.PageIndex - 2); i <= Math.Min(Model.TotalPages, Model.PageIndex + 2); i++)
                {
                    <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                        <a href="@Url.Action(actionName, new {
                            pageNumber = i,
                            searchString = ViewData["CurrentFilter"],
                            pageSize = ViewData["PageSize"]
                        })"
                           class="page-link @(i == Model.PageIndex ? "bg-warning text-dark border-warning" : "bg-dark text-light border-warning")">
                            @i
                        </a>
                    </li>
                }

                @if (Model.HasNextPage)
                {
                    <li class="page-item">
                        <a href="@Url.Action(actionName, new {
                            pageNumber = Model.PageIndex + 1,
                            searchString = ViewData["CurrentFilter"],
                            pageSize = ViewData["PageSize"]
                        })"
                           class="page-link bg-dark text-light border-warning"
                           aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    }
}
else
{
    <!-- Empty state -->
    <div class="text-center text-light py-5">
        <h4>📦 No orders found</h4>
        <p>Try adjusting your search criteria or view all orders.</p>
        <a asp-action="Index" class="btn btn-outline-warning">
            <i class="bi bi-arrow-left me-1"></i> Show All Orders
        </a>
    </div>
}